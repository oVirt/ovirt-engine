---
#
# NOTE: This must be done before configuring vdsm.
#
- name: Check if vdsm id exists
  ansible.builtin.stat:
    path: "{{ vdsm_id_file }}"
  ignore_errors: true
  register: vdsm_id_stat

- block:
    - name: Get vdsm id
      ansible.builtin.command:
        argv:
          - cat
          - "{{ vdsm_id_file }}"
      register: vdsm_id_file_content

    - name: Set vdsm id
      ansible.builtin.set_fact:
        vdsm_id: "{{ vdsm_id_file_content.stdout }}"
  when: vdsm_id_stat.stat.exists

- block:
    - name: Install dmidecode package
      ansible.builtin.yum:
        name: dmidecode
        state: present

    - name: Detect vdsm id for x86_64, i686 or aarch64
      ansible.builtin.command: dmidecode -s system-uuid
      register: vdsm_id_res

    - name: Set vdsm id for x86_64, i686 or aarch64
      ansible.builtin.set_fact:
        vdsm_id: "{{ vdsm_id_res.stdout }}"
      when:
        - vdsm_id_res.rc == 0
        - vdsm_id_res.stdout_lines|length == 1
        - not vdsm_id_res.stdout_lines[0]|regex_search(not_regexp)
  when:
    - not vdsm_id_stat.stat.exists
    - not vdsm_id
    - (ansible_facts.architecture == 'x86_64' or ansible_facts.architecture == 'i686' or ansible_facts.architecture == 'aarch64')

- block:
    - name: Verify ppc system id path exists
      ansible.builtin.stat:
        path: "{{ ppc_system_id }}"
      register: stat_results

    - name: Detect vdsm id for ppc or ppc64
      ansible.builtin.command:
        argv:
          - cat
          - "{{ ppc_system_id }}"
      register: vdsm_id_res
      when: stat_results.stat.exists

    - name: Set vdsm id for ppc or ppc64
      ansible.builtin.set_fact:
        vdsm_id: "{{ vdsm_id_res.stdout | replace(',', '') }}"
      when: stat_results.stat.exists
  when:
    - not vdsm_id
    - (ansible_facts.architecture == 'ppc' or ansible_facts.architecture == 'ppc64')

- name: Set vdsm id if it wasn't found
  ansible.builtin.set_fact:
    vdsm_id: "{{ 9999999999999999999999 | random | to_uuid }}"
  when: not vdsm_id

- name: Store vdsm id
  ansible.builtin.copy: # noqa template-instead-of-copy
    content: "{{ vdsm_id }}"
    dest: "{{ vdsm_id_file }}"
    owner: root
    mode: 0644

# Important: Do not rename this task!
# The name of the task is used by the runner parser
# to load the VDSM id to the engine.
# See org.ovirt.engine.core.common.utils.ansible.AnsibleConstants
- name: Fetch vdsm id
  ansible.builtin.slurp:
    src: "{{ vdsm_id_file }}"

- name: Create vdsm.conf content
  ansible.builtin.set_fact:
    vdsm_config_prefix: "[vars]\nssl= {{ host_deploy_vdsm_encrypt_host_communication }} \n"

- name: Configure SSL ciphers for EL7
  ansible.builtin.set_fact:
    vdsm_config_prefix: "{{ vdsm_config_prefix }}ssl_ciphers= {{ host_deploy_vdsm_ssl_ciphers }} \n"
  when: el_ver | int == 7

- name: Add adresses to vdsm.conf
  ansible.builtin.set_fact:
    vdsm_config_prefix: "{{ vdsm_config_prefix }} \n[addresses]\nmanagement_port= {{ host_deploy_vdsm_port }} \n"

- name: Copy vdsm config prefix to vdsm.conf
  ansible.builtin.copy: # noqa template-instead-of-copy
    content: "{{ vdsm_config_prefix }}"
    dest: "{{ vdsm_config_file }}"
    owner: root
    mode: 0644
